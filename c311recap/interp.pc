;#lang racket

;(require "parenthec.rkt")

(define-registers k* v* e* env* clo* xv* y*)

(define-program-counter pc*)

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define-union kt
  (empty-k dismount)
  (mult-k-1 eex1 k)
  (mult-k-2 x2 env k)
  (sub-k k)
  (zero-k k)
  (if-k-1 conseq alt env k)
  (throw-k v-exp env)
  (let-k body env k)
  (app-k-1 eerator k)
  (app-k-2 rand env k))

(define-label apply-k
  (union-case k* kt
    [(empty-k dismount) (dismount-trampoline dismount)]
    [(mult-k-1 eex1 k)
     (begin
       (set! k* k)
       (set! v* (* eex1 v*))
       (set! e* e*)
       (set! env* env*)
       (set! pc* apply-k))]
    [(mult-k-2 x2 env k)
     (begin
       (set! k* (kt_mult-k-1 v* k))
       (set! v* v*)
       (set! e* x2)         
       (set! env* env)         
       (set! pc* value-of-cps))]
    [(sub-k k)
     (begin
       (set! k* k)
       (set! v* (sub1 v*))
       (set! e* e*)
       (set! env* env*)         
       (set! pc* apply-k))]
    [(zero-k k)
     (begin
       (set! k* k)
       (set! v* (zero? v*))
       (set! e* e*)
       (set! env* env*)         
       (set! pc* apply-k))]
    [(if-k-1 conseq alt env k) (if v*
                                   (begin
                                     (set! k* k)
                                     (set! v* v*)
                                     (set! e* conseq)
                                     (set! env* env)                                       
                                     (set! pc* value-of-cps))
                                   (begin
                                     (set! k* k)
                                     (set! v* v*)
                                     (set! e* alt)
                                     (set! env* env)                                       
                                     (set! pc* value-of-cps)))]
    [(throw-k v-exp env)
     (begin
       (set! k* v*)
       (set! v* v*)
       (set! e* v-exp)
       (set! env* env)         
       (set! pc* value-of-cps))]
    [(let-k body env k)
     (begin
       (set! k* k)
       (set! v* v*)
       (set! e* body)
       (set! env* (envi_extend-env env v*))
       (set! pc* value-of-cps))]
    [(app-k-1 eerator k)
     (begin
       (set! k* k)
       (set! clo* eerator)
       (set! xv* v*)
       (set! pc* apply-closure))]
    [(app-k-2 rand env k)
     (begin
       (set! k* (kt_app-k-1 v* k))
       (set! v* v*)
       (set! e* rand)
       (set! env* env)         
       (set! pc* value-of-cps))]))



(define-label value-of-cps
  (union-case e* expr
    [(const cexp)
     (begin
       (set! k* k*)
       (set! v* cexp)
       (set! e* e*)
       (set! env* env*)       
       (set! pc* apply-k))]
    [(mult x1 x2)
     (begin
       (set! k* (kt_mult-k-2 x2 env* k*))
       (set! v* v*)
       (set! e* x1)
       (set! env* env*)       
       (set! pc* value-of-cps))]
    [(sub1 x)
     (begin
       (set! k* (kt_sub-k k*))
       (set! v* v*)
       (set! e* x)
       (set! env* env*)
       (set! pc* value-of-cps))]
    [(zero x)
     (begin
       (set! k* (kt_zero-k k*))
       (set! v* v*)
       (set! e* x)
       (set! env* env*)
       (set! pc* value-of-cps))]            
    [(if test conseq alt)
     (begin
       (set! k* (kt_if-k-1 conseq alt env* k*))
       (set! v* v*)
       (set! e* test)
       (set! env* env*)
       (set! pc* value-of-cps))]      
    [(letcc body)
     (begin
       (set! k* k*)
       (set! v* v*)
       (set! e* body)
       (set! env* (envi_extend-env env* k*))
       (set! pc* value-of-cps))]
    [(throw k-exp v-exp)
     (begin
       (set! k* (kt_throw-k v-exp env*))
       (set! v* v*)
       (set! e* k-exp)
       (set! env* env*)
       (set! pc* value-of-cps))]
    [(let e body)
     (begin
       (set! k* (kt_let-k body env* k*))
       (set! v* v*)
       (set! e* e)
       (set! env* env*)
       (set! pc* value-of-cps))]
    [(var expr)
     (begin
       (set! y* expr)
      (set! pc* apply-env))]
    [(lambda body)
     (begin
       (set! v* (clos_clo body env*))
       (set! e* e*)
       (set! env* env*)
       (set! pc* apply-k))]
    [(app rator rand)
     (begin
       (set! k* (kt_app-k-2 rand env* k*))
       (set! v* v*)
       (set! e* rator)
       (set! env* env*)
       (set! pc* value-of-cps))]))

(define-label main 
  (begin
    (set! e*  
          (expr_let 
           (expr_lambda
            (expr_lambda 
             (expr_if
              (expr_zero (expr_var 0))
              (expr_const 1)
              (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
           (expr_mult
            (expr_letcc
             (expr_app
              (expr_app (expr_var 1) (expr_var 1))
              (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
            (expr_const 5))))
    (set! env* (envi_empty-env))
    (set! pc* value-of-cps)    
    (mount-trampoline kt_empty-k k* pc*)
    (printf "Fact 5: ~s\n" v*)))

(define-union clos
  (clo body env))

(define-label apply-closure
  (union-case clo* clos
     [(clo body env)
      (begin
        (set! v* v*)
        (set! e* body)
        (set! env* (envi_extend-env env xv*))
        (set! pc* value-of-cps))]))


(define-union envi
  (empty-env)
  (extend-env env a))

(define-label apply-env
  (union-case env* envi
              [(empty-env) 
               (error 'value-of "unbound identifier")]
              [(extend-env env^ a^)       
               (if (zero? y*)
                   (begin
                     (set! v* a^)
                     (set! e* e*)
                     (set! env* env*)
                     (set! pc* apply-k))
                   (begin
                     (set! y* (sub1 y*))
                     (set! env* env^)
                     (set! pc* apply-env)))]))

